name: AWS Inventory Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: aws-inventory

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install awscli

    - name: Run tests
      run: |
        pytest test/

    - name: Deploy Infrastructure
      run: |
        cd terraform
        terraform init
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan

    - name: Package Python code
      run: |
        cd src
        zip -r ../glue_job.zip .
        cd ..

    - name: Upload to S3
      run: |
        aws s3 cp glue_job.zip s3://${{ env.PROJECT_NAME }}-inventory-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}/glue_job.zip

    - name: Deploy Glue Job
      run: |
        aws glue create-job \
          --name "${{ env.PROJECT_NAME }}-inventory-collector-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}" \
          --role "arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/${{ env.PROJECT_NAME }}-glue-role-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}" \
          --command "{
              \"Name\": \"pythonshell\",
              \"ScriptLocation\": \"s3://${{ env.PROJECT_NAME }}-inventory-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}/glue_job.zip\",
              \"PythonVersion\": \"3.9\"
          }" \
          --default-arguments "{
              \"--job-language\": \"python\",
              \"--extra-py-files\": \"s3://${{ env.PROJECT_NAME }}-inventory-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}/glue_job.zip\",
              \"--enable-metrics\": \"\",
              \"--enable-continuous-cloudwatch-log\": \"true\",
              \"--enable-spark-ui\": \"true\",
              \"--spark-event-logs-path\": \"s3://${{ env.PROJECT_NAME }}-inventory-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}/spark-logs/\"
          }" \
          --max-retries 0 \
          --timeout 2880 \
          --max-capacity 0.0625 \
          --glue-version "3.0" \
          --number-of-workers 2 \
          --worker-type "G.1X"

    - name: Deploy Glue Trigger
      run: |
        aws glue create-trigger \
          --name "${{ env.PROJECT_NAME }}-inventory-trigger-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}" \
          --type "SCHEDULED" \
          --schedule "cron(0 12 * * ? *)" \
          --actions "JobName=${{ env.PROJECT_NAME }}-inventory-collector-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}" \
          --start-on-creation

    - name: Notify Deployment Status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Deployment successful!"
        else
          echo "Deployment failed!"
        fi 